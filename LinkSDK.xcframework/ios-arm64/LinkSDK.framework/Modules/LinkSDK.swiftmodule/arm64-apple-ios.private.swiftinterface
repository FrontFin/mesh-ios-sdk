// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LinkSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CryptoKit
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public struct BrokerAuthentication : Swift.Encodable, Swift.Hashable {
  public let authToken: Swift.String
  public let type: Swift.String
  public init(authToken: Swift.String, type: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: LinkSDK.BrokerAuthentication, b: LinkSDK.BrokerAuthentication) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
public enum TransferFinishedStatus : Swift.String {
  case transferFinishedSuccess
  case transferFinishedError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LinkPayload {
  case accessToken(LinkSDK.AccessTokenPayload)
  case delayedAuth(LinkSDK.DelayedAuthPayload)
}
public struct AccessTokenPayload : Swift.Codable {
  public var id: Swift.String {
    get
  }
  public var accountTokens: [LinkSDK.AccountToken]
  public var brokerBrandInfo: LinkSDK.BrandInfo
  public var expiresInSeconds: Swift.Int?
  public var refreshTokenExpiresInSeconds: Swift.Int?
  public var brokerType: Swift.String
  public var brokerName: Swift.String
  public func integrationAccessToken(accountToken: LinkSDK.AccountToken) -> LinkSDK.IntegrationAccessToken
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DelayedAuthPayload : Swift.Codable {
  public var refreshTokenExpiresInSeconds: Swift.Int?
  public var brokerType: Swift.String
  public var refreshToken: Swift.String
  public var brokerName: Swift.String
  public var brokerBrandInfo: LinkSDK.BrandInfo
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AccountToken : Swift.Codable {
  public var account: LinkSDK.Account
  public var accessToken: Swift.String
  public var refreshToken: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Account : Swift.Codable {
  public var accountId: Swift.String
  public var accountName: Swift.String
  public var frontAccountId: Swift.String?
  public var fund: Swift.Double?
  public var cash: Swift.Double?
  public var isReconnected: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BrandInfo : Swift.Codable {
  public var brokerLogo: Swift.String
  public var brokerPrimaryColor: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum TransferFinishedPayload {
  case success(LinkSDK.TransferFinishedSuccessPayload)
  case error(LinkSDK.TransferFinishedErrorPayload)
}
public struct TransferFinishedSuccessPayload : Swift.Codable {
  public var txId: Swift.String
  public var fromAddress: Swift.String
  public var toAddress: Swift.String
  public var symbol: Swift.String
  public var amount: Swift.Double
  public var networkId: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TransferFinishedErrorPayload : Swift.Codable {
  public var errorMessage: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IntegrationAccessToken : Swift.Codable {
  public var accountId: Swift.String
  public var accountName: Swift.String
  public var accessToken: Swift.String
  public var brokerType: Swift.String
  public var brokerName: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum BrokerAuthenticationStatus : Swift.String, Swift.Codable {
  case succeeded
  case challengeIssued
  case mfaRequired
  case failed
  case notAuthorized
  case badRequest
  case delayed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct BrokerBrandInfo : Swift.Codable {
  public var imagePath: Swift.String?
  public var colorHEX: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol LinkStoring {
  var accessTokens: [LinkSDK.AccessTokenPayload] { get }
  func add(accessToken: LinkSDK.AccessTokenPayload)
  func remove(accessToken: LinkSDK.AccessTokenPayload)
  func saveAccessTokens()
}
public class LinkStore : LinkSDK.LinkStoring {
  public var accessTokens: [LinkSDK.AccessTokenPayload]
  public init()
  public func add(accessToken: LinkSDK.AccessTokenPayload)
  public func remove(accessToken: LinkSDK.AccessTokenPayload)
  public func saveAccessTokens()
  @objc deinit
}
public protocol BrokerAccountable : AnyObject, Swift.Decodable, Swift.Encodable {
  var id: Swift.String { get }
  var accessToken: Swift.String? { get set }
  var accountId: Swift.String? { get set }
  var accountName: Swift.String? { get set }
  var accessTokenUpdatedAt: Foundation.Date? { get set }
  var brokerType: Swift.String { get set }
  var refreshToken: Swift.String? { get set }
  var brokerName: Swift.String? { get set }
  var expiresInSeconds: Swift.Double? { get set }
  var refreshTokenExpiresInSeconds: Swift.Int? { get set }
  var brokerLogoBase64: Swift.String? { get set }
  var colorHEX: Swift.String? { get set }
  var brokerBrandInfo: LinkSDK.BrokerBrandInfo? { get set }
  var status: LinkSDK.BrokerAuthenticationStatus { get set }
  var authentication: LinkSDK.BrokerAuthentication { get }
  var refreshTokenUpdatedAt: Foundation.Date? { get set }
  var needToRefreshToken: Swift.Bool { get }
  func update(broker: LinkSDK.BrokerAccountable)
}
extension LinkSDK.BrokerAccountable {
  public var authentication: LinkSDK.BrokerAuthentication {
    get
  }
  public var needToRefreshToken: Swift.Bool {
    get
  }
}
public enum LinkResult {
  case failure(Swift.String)
  case success(LinkSDK.LinkHandler)
}
public struct LinkSettings {
  public var useSecureOnDeviceStorage: Swift.Bool
  public var accessTokens: [LinkSDK.IntegrationAccessToken]?
  public var transferDestinationTokens: [LinkSDK.IntegrationAccessToken]?
  public init(useSecureOnDeviceStorage: Swift.Bool, accessTokens: [LinkSDK.IntegrationAccessToken]? = nil, transferDestinationTokens: [LinkSDK.IntegrationAccessToken]? = nil)
}
public class LinkConfiguration {
  public var isLinkTokenValid: Swift.Bool {
    get
  }
  public var isTransferLink: Swift.Bool {
    get
  }
  public init(linkToken: Swift.String, settings: LinkSDK.LinkSettings? = nil, onIntegrationConnected: ((LinkSDK.LinkPayload) -> Swift.Void)? = nil, onTransferFinished: ((LinkSDK.TransferFinishedPayload) -> Swift.Void)? = nil, onEvent: (([Swift.String : Any]?) -> Swift.Void)? = nil, onExit: (() -> Swift.Void)? = nil)
  public func createHandler() -> LinkSDK.LinkResult
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LinkHandler {
  public func create() -> UIKit.UIViewController
  public func present(in viewController: UIKit.UIViewController)
  @objc deinit
}
extension LinkSDK.TransferFinishedStatus : Swift.Equatable {}
extension LinkSDK.TransferFinishedStatus : Swift.Hashable {}
extension LinkSDK.TransferFinishedStatus : Swift.RawRepresentable {}
extension LinkSDK.BrokerAuthenticationStatus : Swift.Equatable {}
extension LinkSDK.BrokerAuthenticationStatus : Swift.Hashable {}
extension LinkSDK.BrokerAuthenticationStatus : Swift.RawRepresentable {}
