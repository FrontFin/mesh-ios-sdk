name: LinkSDK CI/CD Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
      - main
  workflow_dispatch:
    inputs:
        execute_release:
            description: 'Perform release?'
            required: false
            default: false
            type: 'boolean'
        MARKETING_VERSION:
            description: 'Release version'
            required: false
            default: ''
            type: 'string'
env:
  BASE_BRANCH: main
  REMOTE_REPOSITORY: "FrontFin/mesh-ios-sdk"

jobs:
  build-and-test:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '14.3.1'
        
      - name: Install dependencies
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install xcodegen

      - name: Install the Apple certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          # BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          # PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          # echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # # apply provisioning profile
          # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        
      - name: Set Marketing Version
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.execute_release == 'true' && github.event.inputs.MARKETING_VERSION != ''
        id: set_version
        run: |
          version=github.event.inputs.MARKETING_VERSION
          echo "MARKETING_VERSION=$version" >> $GITHUB_ENV
          
      - name: Build SDK
        run: ./build-framework.sh ${{ env.MARKETING_VERSION }}

      - name: Test
        run: |
          xcodebuild -scheme LinkSDK -showdestinations
          xcodebuild -scheme LinkSDK -destination 'platform=iOS Simulator,name=iPhone 14' test

      - name: Checkout mesh-ios-sdk Repository
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.execute_release == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: ${{ env.REMOTE_REPOSITORY}}
          path: 'mesh-ios-sdk_repo'
          token: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Create new Release
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.execute_release == 'true' && github.event.inputs.MARKETING_VERSION != ''
        working-directory: mesh-ios-sdk_repo
        env:
          GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b release_${{ env.MARKETING_VERSION }} ${{ env.BASE_BRANCH }}
          cp -r ../mesh-ios-sdk/* .
          git add .
          git commit -m "Release ${{ env.MARKETING_VERSION }}"
          git push -u origin release_${{ env.MARKETING_VERSION }}
          git tag -a "${{ env.MARKETING_VERSION }}" -m "Release ${{ env.MARKETING_VERSION }}"
          git push origin ${{ env.MARKETING_VERSION }}
          
          pr_result=$(gh pr create \
          --title "Automatic PR: Create new release" \
          --body "This automatically created Pull Request includes the latest release from the source repo. Please review the changes and merge this PR with the \"${{ env.BASE_BRANCH }}\" branch into the main codebase." \
          --base ${{ env.BASE_BRANCH }} \
          --head release_${{ env.MARKETING_VERSION }} \
          --repo ${{ env.REMOTE_REPOSITORY }} 2>&1)
          exit_code=$?
          
          if [ $exit_code -eq 0 ]; then
            echo "COMMENT_BODY=A new release is ready for review: $pr_result version: \"${{ env.MARKETING_VERSION }}\"" >> $GITHUB_OUTPUT
            gh release create ${{ env.MARKETING_VERSION }} \
              --title "Release ${{ env.MARKETING_VERSION }}" \
              --notes "Release notes here" \
              --draft
          else
            echo "COMMENT_BODY=Error creating PR: $pr_result version: \"${{ github.run_number }}\"" >> $GITHUB_OUTPUT
          fi
